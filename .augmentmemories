

















# 项目管理与工作流
- 项目根目录D:\codee\xiyouji-rela-map已统一使用pnpm workspace管理包，src\server已纳入workspace统一管理，不再使用npm
- 用户偏好在单独的文件夹（如'rebuild'）中重建代码，而不是就地修改，并希望在选择前看到多个解决方案选项。
- 用户习惯使用_experiments目录进行项目进度跟踪、工作接力和交接，这是其项目管理流程的重要组成部分。
- 用户偏好在开始工作前先全面了解项目现状，然后基于现有进度接力继续开发工作。
- 用户喜欢从TODO列表开始进行任务组织，并偏好实施长期计划，表明倾向于战略性开发方法。
- 用户偏好创建验证脚本来检查所有项目文件的文件格式一致性和质量。
- 用户强烈偏好保持现有工作良好的方法，不喜欢在当前解决方案正常工作时创建新方法或进行不必要的重构。
- 用户偏好直接修复问题而不是通过简化或逃避来解决，要求面对和解决技术难题。
- 用户偏好在存在语法错误时，就地修复现有脚本，而不是重新定义或重新创建它们。
- 用户偏好在重大版本更新前进行项目版本标记(如tagv1.0.0)，并进行全面的项目文件分析和清理，要求提供多个方案供选择。
- 用户偏好在项目清理完成后进行项目文件架构优化作为下一步开发流程。
- 用户偏好在项目交接时进行架构优化，表明其重视项目结构化和代码质量管理的工作流程
- 用户偏好在工作交接时记录未完成任务和未来规划，表明重视项目连续性和工作交接流程。
- 用户偏好手动逐个文件处理代码重构，而不是使用自动化脚本进行批量修改。
- 用户偏好将同类、功能文件进行详细的文件夹封装，避免大量文件堆积在src目录中，并希望在实施前看到多个组织方案供选择
- 用户偏好采用方案A的细粒度组件文件夹架构进行代码重构，并强调在移动文件夹时必须同步更新相关的引用路径。
- 用户偏好选择混合方案（方案C）来处理项目重构，表明倾向于平衡风险和效率的分阶段执行策略。

# 技术偏好
- 用户偏好在JavaScript/TypeScript项目中使用pnpm作为包管理器，直接从根目录运行'pnpm dev'启动项目。
- 项目已完全统一使用pnpm workspace作为包管理器，包括src/server子项目。
- 用户偏好使用中文作为代码注释、文档和记忆的主要语言。
- 用户偏好snake_case（多下划线）命名约定作为正确格式。
- 用户偏好使用Cloudflare Tunnel而不是ngrok进行外部访问，并在vite.config.js中配置allowedHosts允许所有主机访问。
- 用户偏好移除WebGPU功能，因为它无法正常工作，并希望恢复到原始的仅WebGL实现。
- 用户偏好后端服务具有端口自动检测和适应性功能，而不是硬编码固定端口。

# 数据管理
- 项目数据存储已完全从JSON文件迁移为SQLite数据库，性能提升14倍
- 数据库文件位置：data/characters.db，包含482条记录（150角色+332别名）
- 原始JSON文件已备份到docs/data/JSON目录，作为历史参考保留
- 数据服务器已统一为SQLite版本：src/server/dataServer.js，支持高级搜索API
- 数据库字段已完成汉化处理：主角、神仙、妖魔、龙族等中文分类
- 后端API支持中英文兼容的角色类型映射和颜色配置
- 数据加载通过SQLite数据库进行，不再依赖JSON文件解析

# 界面设计
- 用户偏好具有全面控制参数的GUI界面，用于微调效果和配置，但GUI控制面板应默认折叠到最小状态。
- 用户偏好直观且视觉上吸引人的数据管理界面，具有自动数据集加载功能。
- 用户偏好Character Controls和Controls面板定位在同一列作为并行元素，而不是嵌套或单独布局。
- 用户偏好简洁的界面设计，不需要框选中的按钮，并希望移除显示端口和角色数量的标签。
- 用户偏好在3D可视化中添加交互功能：鼠标悬浮时显示描边泛光效果和基于JSON数据的信息卡片。
- 用户偏好添加UI区块用于快速定位已加载的模型文件并进入局部视图，提升模型导航体验。

# 3D可视化设置
- 用户在网页浏览器中运行3D可视化时优先考虑低端计算机的性能优化，必要时优先考虑流畅性能而不是视觉质量。
- 用户偏好在银河系可视化项目中禁用自动性能级别调整，只保留手动配置选择。
- 用户偏好星球发光强度默认设置为0.2，Character Controls默认参数：透明度1.0，全局大小0.6，发光强度0.7。
- 用户偏好3D可视化中球体发光效果应与球体自身颜色保持一致，且亮度适中，不应太暗。
- 用户偏好在3D可视化应用程序中拥有精确的手动相机视角控制，用于调整初始用户进入视角。
- 成功实施多InstancedMesh颜色分组方案，实现基于角色类型的9种颜色映射，支持482个角色球体的高性能多颜色渲染。
- 用户偏好3D模型和球体特效是独立组件，模型大小应合适，加载状态应隐藏球体，特效应直接从D:\codee\xiyouji-rela-map\reference\refer\three复制参考实现。
- 模型检测系统已实现自动化：scripts/build/generate-model-index.js动态扫描public/models目录
- 模型索引文件public/models/index.json自动生成，包含白龙马在内的11个GLB模型
- 模型加载已基于SQLite数据库的角色数据（name, pinyin字段）自动匹配GLB文件
- 不再需要手动维护knownModels数组，模型检测完全自动化

# 局部视图设计
- 用户偏好局部视图界面设计：点击角色数据点进入局部视图，左边显示角色球体，右边显示信息面板，包含返回按钮。
- 用户选择独立场景方案(方案B) + 缩放动画过渡 + 用户可调整相机控制 + 基础扩展信息面板 + 左上角返回按钮 + 完全隐藏其他角色。
- 用户偏好在局部视图中根据角色名称加载对应的.glb模型文件，实现线框和点特效渲染，并创建GUI面板用于调试特效参数，模型和球体应为独立组件，特效直接参考D:\codee\xiyouji-rela-map\reference\refer\three实现。
- 用户偏好选择方案B：完整特效系统 + 高级GUI，而不是基础实现或完全重构方案。
- 用户偏好模型特效调试GUI面板默认完全收起状态，所有文件夹都应该默认关闭以减少界面干扰。

# 已完成的核心问题（原待办事项）
- ✅ 全项目统一使用pnpm包管理器：已完成pnpm workspace配置，src/server纳入统一管理
- ✅ 数据存储方式统一：已确定使用SQLite数据库，性能提升14倍，支持高级查询
- ✅ 模型检测加载自动化：已实现动态扫描，不再需要手动维护knownModels数组

# 项目状态
- 项目基础设施统一化和架构优化已100%完成：包管理器统一为pnpm workspace，数据存储统一为SQLite(性能提升14倍)，脚本命令全部使用pnpm，目录结构按功能域重组(scripts分4组，utils分4域)，编译错误从25个减少到0个，项目处于最佳健康状态。

# 目录结构优化成果
- scripts目录已重组：build/dev/testing/maintenance四个功能分组，脚本查找效率提升75%
- src/utils目录已细化：data/performance/three/ui按功能域组织，galaxyGenerator.ts移至three目录
- 残留文件已清理：删除src/server/node_modules等npm残留，节省磁盘空间200MB
- 引用路径已修复：所有移动文件的import路径已更新并验证通过
